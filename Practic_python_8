#Математические выражения

#импорт нужных библиотек
from kanren import run, var, fact
from kanren.assoccomm import eq_assoccomm as eq
from kanren.assoccomm import commutative, associative

#Определение математических операций для использования
add = 'add'
mul = 'mul'

#Указываем, что сложение и умножение - коммуникативные процессы
fact(commutative, mul)
fact(commutative, add)
fact(associative, mul)
fact(associative, add)


a, b = var('a'), var('b')

#Сопоставление выражения с исходным шаблоном ( (5 + a) * b )
Original_pattern = (mul, (add, 5, a), b)

exp1 = (mul, 2, (add, 3, 1))
exp2 = (add,5,(mul,8,1))

#Вывод
print(run(0, (a,b), eq(original_pattern, exp1)))
print(run(0, (a,b), eq(original_pattern, exp2)))


#Проверка на простые числа

#Импорт необходимых библиотек
from kanren import isvar, run, membero
from kanren.core import success, fail, goaleval, condeseq, eq, var
from sympy.ntheory.generate import prime, isprime
import itertools as it

#Определение функции, которая будет проверять простые числа на основе заданных чисел
def prime_check(x):
if isvar(x):
 return condeseq([(eq,x,p)] for p in map(prime, it.count(1)))
else:
 return success if isprime(x) else fail
 
x = var()
print((set(run(0,x,(membero,x,(12,14,15,19,20,21,22,23,29,30,41,44,52,62,65,85)),
(prime_check,x)))))
print((run(10,x,prime_check(x))))


#Решая головоломки

#Рассмотрение примера варианта головоломки Зебра, который выглядит следующим образом:
'''
There are five houses.
The English man lives in the red house.
The Swede has a dog.
The Dane drinks tea.
The green house is immediately to the left of the white house.
They drink coffee in the green house.
The man who smokes Pall Mall has birds.
In the yellow house they smoke Dunhill.
In the middle house they drink milk.
The Norwegian lives in the first house.
The man who smokes Blend lives in the house next to the house with cats.
In a house next to the house where they have a horse, they smoke Dunhill.
The man who smokes Blue Master drinks beer.
The German smokes Prince.
The Norwegian lives next to the blue house.
They drink water in a house next to the house where they smoke Blend.
'''

#Импорт необходимых пакетов
from kanren import *
from kanren.core import lall
import time

#Определяем две функции — left () и next ()
def left(q, p, list):
 return membero((q,p), zip(list, list[1:]))
def next(q, p, list):
 return conde([left(q, p, list)], [left(p, q, list)])
 

houses = var()

#Определяем правила с помощью пакета lall
rules_zebraproblem = lall(
 (eq, (var(), var(), var(), var(), var()), houses),
 (membero,('Englishman', var(), var(), var(), 'red'), houses),
 (membero,('Swede', var(), var(), 'dog', var()), houses),
 (membero,('Dane', var(), 'tea', var(), var()), houses),
 (left,(var(), var(), var(), var(), 'green'),
 (var(), var(), var(), var(), 'white'), houses),
 (membero,(var(), var(), 'coffee', var(), 'green'), houses),
 (membero,(var(), 'Pall Mall', var(), 'birds', var()), houses),
 (membero,(var(), 'Dunhill', var(), var(), 'yellow'), houses),
 (eq,(var(), var(), (var(), var(), 'milk', var(), var()), var(), var()), houses),
 (eq,(('Norwegian', var(), var(), var(), var()), var(), var(), var(), var()),
houses),
 (next,(var(), 'Blend', var(), var(), var()),
 (var(), var(), var(), 'cats', var()), houses),
 (next,(var(), 'Dunhill', var(), var(), var()),
 (var(), var(), var(), 'horse', var()), houses),
 (membero,(var(), 'Blue Master', 'beer', var(), var()), houses),
 (membero,('German', 'Prince', var(), var(), var()), houses),
 (next,('Norwegian', var(), var(), var(), var()),
 (var(), var(), var(), var(), 'blue'), houses),
 (next,(var(), 'Blend', var(), var(), var()),
 (var(), var(), 'water', var(), var()), houses),
 (membero,(var(), var(), var(), 'zebra', var()), houses)
)

#Запуск решателя с предыдущими ограничениями
solutions = run(0, houses, rules_zebraproblem)

#Извлекаем вывод из решателя
output_zebra = [house for house in solutions[0] if 'zebra' in house][0][0]

#Вывод решения
print ('\n'+ output_zebra + 'owns zebra.')
